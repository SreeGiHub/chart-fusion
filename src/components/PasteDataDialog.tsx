
import React, { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Sparkles, 
  AlertTriangle, 
  CheckCircle, 
  BarChart, 
  RefreshCw,
  Zap,
  ArrowRight,
  FileSpreadsheet,
  Database,
  TrendingUp,
  Play
} from "lucide-react";
import { toast } from "sonner";
import { processData, validateData, DataColumn, ProcessedData } from "@/utils/dataProcessor";
import { generateChartSuggestions, createChartsFromData } from "@/utils/autoChartGenerator";
import { useDashboard } from "@/context/DashboardContext";
import DataPreviewTable from "./DataPreviewTable";

interface PasteDataDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

const PasteDataDialog: React.FC<PasteDataDialogProps> = ({
  open,
  onOpenChange,
}) => {
  const { dispatch, state } = useDashboard();
  const [activeTab, setActiveTab] = useState("paste");
  const [pastedData, setPastedData] = useState("");
  const [processedData, setProcessedData] = useState<ProcessedData | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const [autoGeneratedCharts, setAutoGeneratedCharts] = useState<any[]>([]);

  const sampleData = `Name	Age	Sales	Region	Date
John Smith	25	1500	North	2024-01-15
Sarah Johnson	30	2000	South	2024-01-16
Mike Davis	28	1800	East	2024-01-17
Lisa Wilson	35	2200	West	2024-01-18`;

  const handleTrySampleData = () => {
    setPastedData(sampleData);
    toast.success("Sample data loaded! Click 'Process Data' to continue.");
  };

  const handlePasteData = () => {
    if (!pastedData.trim()) {
      toast.error("Please paste some data first");
      return;
    }

    setIsProcessing(true);
    try {
      const processed = processData(pastedData);
      setProcessedData(processed);
      
      if (processed.isValid) {
        setActiveTab("preview");
        toast.success(
          <div className="flex items-center gap-2">
            <CheckCircle className="h-4 w-4 text-green-500" />
            <span>Data processed successfully! Found {processed.columns.length} columns and {processed.rows.length} rows.</span>
          </div>
        );
      } else {
        toast.error("Data processing failed. Please check the errors below.");
      }
    } catch (error) {
      console.error("Data processing error:", error);
      toast.error("Failed to process data. Please check your data format.");
    } finally {
      setIsProcessing(false);
    }
  };

  const handleColumnUpdate = (columnIndex: number, updates: Partial<DataColumn>) => {
    if (!processedData) return;
    
    const updatedColumns = [...processedData.columns];
    updatedColumns[columnIndex] = { ...updatedColumns[columnIndex], ...updates };
    
    setProcessedData({
      ...processedData,
      columns: updatedColumns
    });
  };

  const handleGenerateCharts = () => {
    if (!processedData) return;

    const validation = validateData(processedData);
    if (!validation.isValid) {
      toast.error("Please fix data errors before generating charts");
      return;
    }

    setIsGenerating(true);
    try {
      const suggestions = generateChartSuggestions(processedData);
      if (suggestions.length === 0) {
        toast.info("No suitable chart suggestions found for this data");
        return;
      }

      const charts = createChartsFromData(processedData, suggestions);
      setAutoGeneratedCharts(charts);
      
      // Add charts to dashboard
      charts.forEach(chart => {
        dispatch({ type: "ADD_ITEM", payload: chart });
      });

      toast.success(
        <div className="flex items-center gap-2">
          <Sparkles className="h-4 w-4 text-blue-500" />
          <span>Generated {charts.length} charts from your data! ðŸŽ‰</span>
        </div>
      );
      onOpenChange(false);
      
      // Reset state
      setPastedData("");
      setProcessedData(null);
      setActiveTab("paste");
    } catch (error) {
      console.error("Chart generation error:", error);
      toast.error("Failed to generate charts. Please try again.");
    } finally {
      setIsGenerating(false);
    }
  };

  const resetDialog = () => {
    setPastedData("");
    setProcessedData(null);
    setAutoGeneratedCharts([]);
    setActiveTab("paste");
  };

  const validation = processedData ? validateData(processedData) : null;

  return (
    <Dialog open={open} onOpenChange={(open) => { 
      onOpenChange(open);
      if (!open) resetDialog();
    }}>
      <DialogContent className="max-w-6xl max-h-[95vh] flex flex-col">
        <DialogHeader className="space-y-3 pb-4 border-b">
          <DialogTitle className="flex items-center gap-3 text-xl">
            <div className="flex items-center justify-center w-10 h-10 rounded-full bg-gradient-to-r from-emerald-500 to-blue-500">
              <Sparkles className="h-5 w-5 text-white" />
            </div>
            <div>
              <div className="text-xl font-bold">Paste & Visualize</div>
              <div className="text-sm font-normal text-muted-foreground">Transform your data into beautiful charts instantly</div>
            </div>
          </DialogTitle>
        </DialogHeader>

        <div className="flex-1 overflow-hidden">
          <Tabs value={activeTab} onValueChange={setActiveTab} className="h-full flex flex-col">
            <TabsList className="grid w-full grid-cols-2 mb-6">
              <TabsTrigger value="paste" className="flex items-center gap-2">
                <FileSpreadsheet className="h-4 w-4" />
                <span>1. Paste Data</span>
              </TabsTrigger>
              <TabsTrigger value="preview" disabled={!processedData} className="flex items-center gap-2">
                <Database className="h-4 w-4" />
                <span>2. Preview & Generate</span>
              </TabsTrigger>
            </TabsList>

            <TabsContent value="paste" className="flex-1 space-y-6">
              <div className="bg-gradient-to-r from-emerald-50 to-blue-50 p-4 rounded-lg border border-emerald-200">
                <div className="flex items-start gap-3">
                  <TrendingUp className="h-5 w-5 text-emerald-600 mt-0.5" />
                  <div>
                    <h3 className="font-medium text-gray-900">How it works</h3>
                    <p className="text-sm text-gray-600 mt-1">
                      Copy data from Excel or Google Sheets, paste it below, and we'll instantly create multiple chart types to visualize your insights.
                    </p>
                  </div>
                </div>
              </div>

              <div className="space-y-3">
                <div className="flex items-center justify-between">
                  <Label htmlFor="paste-area" className="text-base font-medium">
                    Paste your data here
                  </Label>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleTrySampleData}
                    className="text-xs"
                  >
                    Try sample data
                  </Button>
                </div>
                <Textarea
                  id="paste-area"
                  placeholder="Paste tabular data here...

Example:
Name	Age	Sales	Region
John	25	1500	North
Sarah	30	2000	South
Mike	28	1800	East"
                  value={pastedData}
                  onChange={(e) => setPastedData(e.target.value)}
                  className="h-48 font-mono text-sm resize-none"
                />
              </div>

              <div className="flex items-center gap-4 text-xs text-muted-foreground">
                <div className="flex items-center gap-2">
                  <CheckCircle className="h-3 w-3 text-green-500" />
                  <span>Supports Excel & Sheets formats</span>
                </div>
                <div className="flex items-center gap-2">
                  <CheckCircle className="h-3 w-3 text-green-500" />
                  <span>Auto-detects data types</span>
                </div>
                <div className="flex items-center gap-2">
                  <CheckCircle className="h-3 w-3 text-green-500" />
                  <span>Up to 20 rows</span>
                </div>
              </div>

              {processedData && !processedData.isValid && (
                <Alert variant="destructive">
                  <AlertTriangle className="h-4 w-4" />
                  <AlertDescription>
                    <div className="space-y-1">
                      {processedData.errors.map((error, index) => (
                        <div key={index}>â€¢ {error}</div>
                      ))}
                    </div>
                  </AlertDescription>
                </Alert>
              )}

              <div className="flex justify-end pt-4 border-t">
                <Button 
                  onClick={handlePasteData} 
                  disabled={!pastedData.trim() || isProcessing}
                  className="min-w-32 bg-gradient-to-r from-emerald-600 to-blue-600 hover:from-emerald-700 hover:to-blue-700"
                >
                  {isProcessing ? (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      Processing...
                    </>
                  ) : (
                    <>
                      <ArrowRight className="h-4 w-4 mr-2" />
                      Process Data
                    </>
                  )}
                </Button>
              </div>
            </TabsContent>

            <TabsContent value="preview" className="flex-1 flex flex-col overflow-hidden">
              {processedData && (
                <div className="flex-1 flex flex-col space-y-6 overflow-hidden">
                  {validation && validation.warnings.length > 0 && (
                    <Alert>
                      <AlertTriangle className="h-4 w-4" />
                      <AlertDescription>
                        <div className="space-y-1">
                          <strong>Data Warnings:</strong>
                          {validation.warnings.map((warning, index) => (
                            <div key={index} className="text-xs">â€¢ {warning}</div>
                          ))}
                        </div>
                      </AlertDescription>
                    </Alert>
                  )}

                  <div className="flex-1 overflow-auto">
                    <DataPreviewTable 
                      data={processedData}
                      onColumnUpdate={handleColumnUpdate}
                    />
                  </div>

                  {validation && validation.isValid && (
                    <div className="bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-6 mt-6">
                      <div className="flex items-center gap-3 mb-3">
                        <div className="flex items-center justify-center w-8 h-8 rounded-full bg-green-100">
                          <Zap className="h-4 w-4 text-green-600" />
                        </div>
                        <div>
                          <h3 className="font-semibold text-green-800">Ready to Generate Dashboard!</h3>
                          <p className="text-sm text-green-700">
                            We'll create 6-8 diverse charts including bar, line, pie, and scatter plots based on your data
                          </p>
                        </div>
                      </div>
                      <div className="flex items-center gap-2 text-xs text-green-600 mb-4">
                        <span>â€¢ Charts will be fully editable and movable</span>
                        <span>â€¢ Smart chart type selection</span>
                        <span>â€¢ Instant insights</span>
                      </div>
                      <Button 
                        onClick={handleGenerateCharts}
                        disabled={isGenerating}
                        className="bg-gradient-to-r from-emerald-600 to-blue-600 hover:from-emerald-700 hover:to-blue-700 text-white min-w-40"
                      >
                        {isGenerating ? (
                          <>
                            <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                            Generating...
                          </>
                        ) : (
                          <>
                            <Play className="h-4 w-4 mr-2" />
                            Generate My Dashboard
                          </>
                        )}
                      </Button>
                    </div>
                  )}
                </div>
              )}
            </TabsContent>
          </Tabs>
        </div>

        <DialogFooter className="flex justify-between border-t pt-4">
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default PasteDataDialog;
