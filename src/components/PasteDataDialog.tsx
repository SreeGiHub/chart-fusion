
import React, { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  ClipboardPaste, 
  AlertTriangle, 
  CheckCircle, 
  BarChart, 
  RefreshCw,
  Sparkles
} from "lucide-react";
import { toast } from "sonner";
import { processData, validateData, DataColumn, ProcessedData } from "@/utils/dataProcessor";
import { generateChartSuggestions, createChartsFromData } from "@/utils/autoChartGenerator";
import { useDashboard } from "@/context/DashboardContext";
import DataPreviewTable from "./DataPreviewTable";

interface PasteDataDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

const PasteDataDialog: React.FC<PasteDataDialogProps> = ({
  open,
  onOpenChange,
}) => {
  const { dispatch } = useDashboard();
  const [activeTab, setActiveTab] = useState("paste");
  const [pastedData, setPastedData] = useState("");
  const [processedData, setProcessedData] = useState<ProcessedData | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [autoGeneratedCharts, setAutoGeneratedCharts] = useState<any[]>([]);

  const handlePasteData = () => {
    if (!pastedData.trim()) {
      toast.error("Please paste some data first");
      return;
    }

    setIsProcessing(true);
    try {
      const processed = processData(pastedData);
      setProcessedData(processed);
      
      if (processed.isValid) {
        setActiveTab("preview");
        toast.success(`Data processed successfully! Found ${processed.columns.length} columns and ${processed.rows.length} rows.`);
      } else {
        toast.error("Data processing failed. Please check the errors below.");
      }
    } catch (error) {
      console.error("Data processing error:", error);
      toast.error("Failed to process data. Please check your data format.");
    } finally {
      setIsProcessing(false);
    }
  };

  const handleColumnUpdate = (columnIndex: number, updates: Partial<DataColumn>) => {
    if (!processedData) return;
    
    const updatedColumns = [...processedData.columns];
    updatedColumns[columnIndex] = { ...updatedColumns[columnIndex], ...updates };
    
    setProcessedData({
      ...processedData,
      columns: updatedColumns
    });
  };

  const handleGenerateCharts = () => {
    if (!processedData) return;

    const validation = validateData(processedData);
    if (!validation.isValid) {
      toast.error("Please fix data errors before generating charts");
      return;
    }

    try {
      const suggestions = generateChartSuggestions(processedData);
      if (suggestions.length === 0) {
        toast.info("No suitable chart suggestions found for this data");
        return;
      }

      const charts = createChartsFromData(processedData, suggestions);
      setAutoGeneratedCharts(charts);
      
      // Add charts to dashboard
      charts.forEach(chart => {
        dispatch({ type: "ADD_ITEM", payload: chart });
      });

      toast.success(`Generated ${charts.length} charts from your data!`);
      onOpenChange(false);
      
      // Reset state
      setPastedData("");
      setProcessedData(null);
      setActiveTab("paste");
    } catch (error) {
      console.error("Chart generation error:", error);
      toast.error("Failed to generate charts. Please try again.");
    }
  };

  const handleRegenerateCharts = () => {
    if (!processedData) return;
    
    // Remove previously auto-generated charts if any
    autoGeneratedCharts.forEach(chart => {
      dispatch({ type: "REMOVE_ITEM", payload: chart.id });
    });
    
    // Generate new charts
    handleGenerateCharts();
  };

  const resetDialog = () => {
    setPastedData("");
    setProcessedData(null);
    setAutoGeneratedCharts([]);
    setActiveTab("paste");
  };

  const validation = processedData ? validateData(processedData) : null;

  return (
    <Dialog open={open} onOpenChange={(open) => { 
      onOpenChange(open);
      if (!open) resetDialog();
    }}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-hidden flex flex-col">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <ClipboardPaste className="h-5 w-5" />
            Paste Data to Create Dashboard
          </DialogTitle>
          <DialogDescription>
            Paste tabular data from Excel or Google Sheets to automatically generate charts.
            Maximum 20 rows including header.
          </DialogDescription>
        </DialogHeader>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="flex-1 flex flex-col">
          <TabsList className="grid w-full grid-cols-2">
            <TabsTrigger value="paste">Paste Data</TabsTrigger>
            <TabsTrigger value="preview" disabled={!processedData}>
              Preview & Configure
            </TabsTrigger>
          </TabsList>

          <TabsContent value="paste" className="flex-1 space-y-4">
            <div className="space-y-2">
              <Label htmlFor="paste-area">
                Paste your data here (copied from Excel/Sheets)
              </Label>
              <Textarea
                id="paste-area"
                placeholder="Paste tabular data here...
Example:
Name	Age	Sales	Region
John	25	1500	North
Sarah	30	2000	South
Mike	28	1800	East"
                value={pastedData}
                onChange={(e) => setPastedData(e.target.value)}
                className="h-64 font-mono text-xs"
              />
            </div>

            <div className="flex items-center gap-2 text-xs text-muted-foreground">
              <CheckCircle className="h-3 w-3" />
              <span>Supports tab-separated (Excel) and comma-separated formats</span>
            </div>

            {processedData && !processedData.isValid && (
              <Alert variant="destructive">
                <AlertTriangle className="h-4 w-4" />
                <AlertDescription>
                  <div className="space-y-1">
                    {processedData.errors.map((error, index) => (
                      <div key={index}>• {error}</div>
                    ))}
                  </div>
                </AlertDescription>
              </Alert>
            )}

            <div className="flex justify-end">
              <Button 
                onClick={handlePasteData} 
                disabled={!pastedData.trim() || isProcessing}
                className="min-w-32"
              >
                {isProcessing ? (
                  <>
                    <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                    Processing...
                  </>
                ) : (
                  <>
                    <CheckCircle className="h-4 w-4 mr-2" />
                    Process Data
                  </>
                )}
              </Button>
            </div>
          </TabsContent>

          <TabsContent value="preview" className="flex-1 space-y-4 overflow-auto">
            {processedData && (
              <>
                {validation && validation.warnings.length > 0 && (
                  <Alert>
                    <AlertTriangle className="h-4 w-4" />
                    <AlertDescription>
                      <div className="space-y-1">
                        <strong>Warnings:</strong>
                        {validation.warnings.map((warning, index) => (
                          <div key={index} className="text-xs">• {warning}</div>
                        ))}
                      </div>
                    </AlertDescription>
                  </Alert>
                )}

                <DataPreviewTable 
                  data={processedData}
                  onColumnUpdate={handleColumnUpdate}
                />

                {validation && validation.isValid && (
                  <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                    <div className="flex items-center gap-2 text-green-800 mb-2">
                      <Sparkles className="h-4 w-4" />
                      <span className="font-medium">Ready to Generate Charts!</span>
                    </div>
                    <p className="text-xs text-green-700">
                      Your data looks good. We'll create 6-8 diverse charts including bar, line, pie, and scatter plots based on your data characteristics.
                    </p>
                  </div>
                )}
              </>
            )}
          </TabsContent>
        </Tabs>

        <DialogFooter className="flex justify-between">
          <div className="flex gap-2">
            {autoGeneratedCharts.length > 0 && (
              <Button variant="outline" onClick={handleRegenerateCharts}>
                <RefreshCw className="h-4 w-4 mr-2" />
                Regenerate Charts
              </Button>
            )}
          </div>
          
          <div className="flex gap-2">
            <Button variant="outline" onClick={() => onOpenChange(false)}>
              Cancel
            </Button>
            {processedData && validation?.isValid && (
              <Button onClick={handleGenerateCharts}>
                <BarChart className="h-4 w-4 mr-2" />
                Generate Dashboard
              </Button>
            )}
          </div>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default PasteDataDialog;
